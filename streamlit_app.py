

import subprocess
import sys
import pkg_resources

def install_requirements():
    try:
        with open("requirements.txt", "r") as file:
            required_packages = [line.strip() for line in file.readlines() if line.strip()]

        installed_packages = {pkg.key for pkg in pkg_resources.working_set}
        missing_packages = [pkg for pkg in required_packages if pkg.split("==")[0] not in installed_packages]

        if missing_packages:
            print(f"üì¶ Installation des packages manquants : {missing_packages}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", *missing_packages])
            print("‚úÖ Toutes les d√©pendances sont maintenant install√©es.")
        else:
            print("‚úÖ Toutes les d√©pendances sont d√©j√† install√©es.")

    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification/installation des d√©pendances : {e}")

# Ex√©cuter la fonction
install_requirements()

import subprocess
import sys
import pkg_resources  
import streamlit as st
import pandas as pd
import math
from pathlib import Path
import kagglehub
import matplotlib.pyplot as plt
import seaborn as sns
import unidecode

# --- Configuration de la page ---
st.set_page_config(
    page_title="Analyse de l'Esp√©rance de Vie - OMS",
    page_icon="üåç",
    layout="wide"
)

# --- import du dataset ---
path = kagglehub.dataset_download("kumarajarshi/life-expectancy-who")  # ou sp√©cifie le chemin complet si le fichier est ailleurs
dataset_file = f"{path}/Life Expectancy Data.csv"
df = pd.read_csv(dataset_file)

# --- Texte de pr√©sentation ---
left_co, cent_co, last_co = st.columns([1, 3, 1])
imgleft_co, imgcent_co, imglast_co = st.columns(3)
with cent_co:
    st.title(" Analyse de l'Esp√©rance de Vie - OMS")
with imgcent_co:
    st.image("images/oms_logo.png", width=200)

st.write("")
st.markdown("""---""")

# --- chapitre sur pr√©senttation du dataset ---
left_co, cent_co, last_co = st.columns([1, 3, 1])
with cent_co:
    st.markdown("""
                 # **Pr√©diction de l'esp√©rance de vie**
                """)
    st.markdown("""
    Ce projet √† pour objectif de d√©finir les facteurs influen√ßant l'esp√©rance de vie √† travers diff√©rents pays et ann√©es.
                """)
left_co, cent_co, last_co = st.columns([1, 3, 1])
with cent_co:
    st.markdown("""
                 ## **Hypoth√©se:**
                 Peut on d√©finir l'√©sp√©rence de vie d'une personne en fonction d'un ensemble d'√©l√©ments donn√©s?
                """)
    
st.markdown("""
            
üîé **Objectifs** :
- Explorer les facteurs cl√©s qui influencent la long√©vit√©.
- Nettoyer et pr√©parer les donn√©es.
- Comparer diff√©rents mod√®les de pr√©diction.
- Pr√©senter les r√©sultats de mani√®re interactive
            
üìå **M√©thodologie** :
1. **Exploration des donn√©es** 
2. **Nettoyage des valeurs manquantes** 
3. **Mod√©lisation avec Machine Learning** 
4. **Interpr√©tation des r√©sultats** 
---
""", unsafe_allow_html=True)



# Aper√ßu du dataset
st.subheader("Aper√ßu du dataset BRUT")
st.write(df.head())


# Pr√©sentation des colonnes du dataset
st.subheader("Pr√©sentation des colonnes du dataset")

left_co, center_co, right_co = st.columns([1,2,1])
with center_co:
    st.markdown("""
                ### ‚ö†Ô∏è note: 
                **Life expectancy** sera notre variable **" Y "**. 
                il s'agit de l'√©l√©ment que l'on souhaite pr√©dire.
                """)

left_co, center_co, right_co = st.columns(3)
with left_co:
    st.markdown("""
        1. **Life expectancy** : L'esp√©rance de vie moyenne (en ann√©es) pour le pays et l'ann√©e donn√©s.
        2. **Country** : Le pays correspondant aux donn√©es.
        3. **Year** : L'ann√©e o√π les donn√©es ont √©t√© collect√©es.
        4. **Adult Mortality** : Taux de mortalit√© des adultes (probabilit√© de d√©c√®s entre 15 et 60 ans, par 1000 habitants).
        5. **Infant deaths** : Nombre de d√©c√®s d'enfants de moins de 1 an pour 1000 naissances vivantes.
        6. **Alcohol** : Consommation moyenne d'alcool (litres par habitant par an).
        7. **Percentage expenditure** : D√©penses publiques pour la sant√© (% du PIB).
        """, unsafe_allow_html=True)
    with center_co:
        st.markdown("""
            8. **Hepatitis B** : Taux de couverture vaccinale contre l'h√©patite B chez les enfants (%).
            9. **Measles** : Nombre de cas signal√©s de rougeole.
            10. **BMI** : Indice de masse corporelle moyen (IMC) pour la population.
            11. **Under-five deaths** : Nombre de d√©c√®s d'enfants de moins de 5 ans pour 1000 naissances vivantes.
            12. **Polio** : Taux de couverture vaccinale contre la poliomy√©lite chez les enfants (%).
            13. **Total expenditure** : D√©penses totales pour la sant√© (% du PIB).
            14. **Diphtheria** : Taux de couverture vaccinale contre la dipht√©rie chez les enfants (%).
            """, unsafe_allow_html=True)
    with right_co:
        st.markdown("""
            15. **HIV/AIDS** : D√©c√®s dus au VIH/sida pour 1000 habitants.
            16. **GDP** : Produit int√©rieur brut par habitant (USD).
            17. **Population** : Population totale du pays.
            18. **Thinness 1-19 years** : Pr√©valence de la maigreur chez les enfants et adolescents (1 √† 19 ans) (%).
            19. **Thinness 5-9 years** : Pr√©valence de la maigreur chez les enfants (5 √† 9 ans) (%).
            20. **Income composition of resources** : Indicateur composite de revenus (entre 0 et 1).
            21. **Schooling** : Dur√©e moyenne de scolarisation (ann√©es).
            """, unsafe_allow_html=True)

#  --- statistique desctiptives: 
st.markdown("""
            ---
            """)

left_co, center_co, right_co = st.columns(3)
# Analyse descriptive des donn√©es
with center_co:
    st.subheader("Analyse descriptive du dataset")

# Aper√ßu g√©n√©ral
st.markdown("""
### **üîç Analyse descriptive**
L'objectif de cette section est d'explorer les statistiques de base du dataset et d'identifier les premi√®res observations cl√©s.

Voici ce que nous pouvons examiner :
""")
chart_type = st.radio("Choisissez le type de graphique :", 
                      ["1. Taille du dataset", "2. Types de donn√©es par colonne", "3. Pr√©sence de valeurs manquantes", "4. Statistiques descriptives des variables num√©riques"])

# Taille du dataset
if chart_type == "1. Taille du dataset":
    st.markdown("## **Taille du dataset**")
    st.write(f"**Nombre de lignes** : {df.shape[0]}")
    st.write(f"**Nombre de colonnes** : {df.shape[1]}")

# Types de donn√©es par colonne
if chart_type == "2. Types de donn√©es par colonne":
    left_co, right_co = st.columns(2)
    with left_co:
        st.markdown("""
            ## **Types de donn√©es par colonne**
            """)
        st.write(df.dtypes)
    with right_co:
        st.markdown("""
                    ## **Observations**
                    - ** titre des colone** nous devons formatter les titres des collones.
                    - les variables de type "object" (cat√©goriques) doivent √™tre converties en valeurs num√©riques pour que les mod√®les puissent les utiliser correctement.
                    - **nettoyage et normalisation des donn√©es** Nous devons formatez les lignes dans les colonnes pour √™tres sur qu'il n'y ai pas d'erreur de saisie (Espace, Majuscule...) 
                    - **country**: nous allons utiliser la m√©thode **Encodage One-Hot Encoding** qui va creer une collone pour chaque pays et assigner une valeur 0 ou 1 en fonction de l'appartenance de la ligne √† un pays. """)
    

# Pr√©sence de valeurs manquantes
if chart_type == "3. Pr√©sence de valeurs manquantes":
    st.markdown("## **Pr√©sence de valeurs manquantes**")
    missing_values = df.isnull().sum()
    missing_percent = (df.isnull().sum() / len(df)) * 100
    missing_data = pd.DataFrame({
        "Valeurs manquantes": missing_values,
        "Pourcentage (%)": missing_percent
    })
    st.write(missing_data)

if chart_type == "4. Statistiques descriptives des variables num√©riques":
    st.markdown("## **Statistiques descriptives des variables num√©riques**")
    
    # Calcul des statistiques descriptives
    descriptive_stats = df.describe().transpose()

    # Ajout d'un format plus lisible
    descriptive_stats = descriptive_stats.rename(columns={
        "count": "Nombre de valeurs",
        "mean": "Moyenne",
        "std": "√âcart-type",
        "min": "Valeur min",
        "25%": "1er quartile (Q1)",
        "50%": "M√©diane (Q2)",
        "75%": "3e quartile (Q3)",
        "max": "Valeur max"
    })

    # Affichage sous forme de tableau interactif
    st.write(descriptive_stats)

# ----------------------------------------------------
#  pr√©sentation cleaning
# ----------------------------------------------------
def clean_dataset(df):
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')
    for col in ["country", "status"]:
        if col in df.columns:
            df[col] = df[col].astype(str).str.strip().str.lower()
            df[col] = df[col].apply(lambda x: unidecode.unidecode(x))  # Supprimer accents
    return df

def imput_null(df):
    columns_median = ["life_expectancy", "adult_mortality", "alcohol", "total_expenditure", 
                "thinness_5-9_years", "thinness__1-19_years", "bmi", ]
    for col in columns_median:
        if col in df.columns:  # V√©rifier si la colonne existe avant d'appliquer
            df[col].fillna(df[col].median(), inplace=True)
    # Moyenne pour les indicateurs de vaccination (plus de groupby, uniquement moyenne globale)
    columns_vaccination = ["hepatitis_b", "polio", "diphtheria"]
    for col in columns_vaccination:
        if col in df.columns:
            df[col].fillna(df[col].mean(), inplace=True)  
    # Moyenne pour les indicateurs √©conomiques et d'√©ducation
    columns_mean = ["income_composition_of_resources", "schooling"]
    for col in columns_mean:
        if col in df.columns:
            df[col].fillna(df[col].mean(), inplace=True)
    # Imputation bas√©e sur la m√©diane globale pour GDP et Population (pas de groupby)
    columns_gdp_population = ["gdp", "population", "bmi", "thinness__1-19_years", "thinness_5-9_years" ]
    for col in columns_gdp_population:
        if col in df.columns:
            df[col].fillna(df[col].median(), inplace=True)

df = clean_dataset(df)
df_onehot = pd.get_dummies(df, columns=["country","status"]).round(2)

# radio:
left_co, center_co, right_co = st.columns([1,3, 1])
with center_co:
    st.markdown(""" # DATA-CLEANSING """)
    chart_type = st.radio(" ", 
                      ["Typages des Donn√©es", "One-Hot Encoding (country, status)", "Remplacement des valeurs manquantes"])
    if chart_type == "Typages des Donn√©es":
        st.markdown(""" 
                ### **Typages des Donn√©es** 
                Ici, nous formatons le titre des colones, ainsi que toutes les lignes afin d'√©tre sur d'avoir une nomenclature identique pour chaque colonne, et pour chaque objet.
                """)
        st.write(df.head(10).round(2))
        df = df_onehot.round(2)
    
    if chart_type == "One-Hot Encoding (country, status)":
        st.markdown(""" 
                ### **One-Hot Encoding (country, status)** 
                Ici, nous transformons les valeurs string des pays et des status en colonne par pays, avec 0 ou 1 en fonction de l'appartenace de la ligne au pays.
                """)
        st.write(df_onehot.head(10))

if chart_type == "Remplacement des valeurs manquantes":
    col_right, col_left = st.columns(2)
    with col_right:
        st.markdown(""" 
                ### **Remplacement des valeurs manquantes** 
                Les valeures manquantes peuvent impacter la qualit√© de l'analyse et fausser les mod√®les pr√©dictifs.  
                Voici une analyse d√©taill√©e des colonnes concern√©es et les strat√©gies retenues pour leur traitement.
            ---

            ## üõ† M√©thodes d'imputation retenues :
            - **M√©diane** : utilis√©e pour √©viter l'effet des valeurs extr√™mes (outliers).
            - **Moyenne par pays** : pr√©f√©r√©e pour les indicateurs influenc√©s par le pays (vaccination, √©ducation).
            - **M√©diane par pays & ann√©e** : pour les variables comme la **Population** et le **PIB**, tr√®s h√©t√©rog√®nes.

            ---
                    
            ## Colonnes avec valeurs manquantes et strat√©gies de traitement
                    
            ---

            | **Colonne**                      | **% de valeurs manquantes** | **Statistiques cl√©s** | **Strat√©gie d'imputation** |
            |----------------------------------|---------------------------|-----------------------|----------------------------|
            | **Life expectancy**              | 0.34%                     | M√©diane = 72.1, √âcart-type = 9.52 | **M√©diane** : √©vite l'impact des outliers. |
            | **Adult Mortality**              | 0.34%                     | M√©diane = 144, √âcart-type = 124.29 | **M√©diane** : car forte dispersion des valeurs. |
            | **Alcohol**                      | 6.60%                     | M√©diane = 3.75, √âcart-type = 4.05 | **M√©diane** : variable √† forte variabilit√©. |
            | **Hepatitis B**                  | 18.82%                    | M√©diane non fournie | **Moyenne par pays** : taux de vaccination. |
            | **BMI**                          | 1.15%                     | M√©diane = 22.4 | **M√©diane** : homog√©n√©it√© relative des valeurs. |
            | **Polio**                        | 0.65%                     | M√©diane non fournie | **Moyenne par pays** : taux de vaccination. |
            | **Total expenditure**             | 7.69%                     | M√©diane = 5.85 | **M√©diane** : √©vite les extr√™mes. |
            | **Diphtheria**                   | 0.65%                     | M√©diane non fournie | **Moyenne par pays** : taux de vaccination. |
            | **GDP**                          | 15.25%                    | M√©diane = 3457, √âcart-type = 15,312 | **M√©diane par pays** : tr√®s forte dispersion du PIB. |
            | **Population**                   | 22.19%                    | M√©diane non fournie | **M√©diane par pays & ann√©e** : donn√©e tr√®s variable. |
            | **Thinness 1-19 years**          | 1.15%                     | M√©diane = 2.3 | **M√©diane** : variable peu dispers√©e. |
            | **Thinness 5-9 years**           | 1.15%                     | M√©diane = 2.3 | **M√©diane** : m√™me raison que Thinness 1-19 ans. |
            | **Income composition of resources** | 5.68%                  | M√©diane = 0.62 | **Moyenne par pays** : refl√®te les disparit√©s √©conomiques. |
            | **Schooling**                    | 5.55%                     | M√©diane = 12.3 | **Moyenne par pays** : car impact fort du pays. |

            ---
                            
            """)
        with col_left:
            st.write("")
            st.markdown("""
                        lignes apr√©s traitements des valeurs manquantes
                        """)
            imput_null(df_onehot)
            st.write(df_onehot.isnull().sum())

imput_null(df_onehot)
df = df_onehot

    # ---------------------------------------------
# --- Interface utilisateur ---
st.subheader("üîç Visualisation interactive des donn√©es")

# Liste des colonnes num√©riques pour l‚Äôanalyse
numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
# S√©lection du type de graphique
chart_type = st.radio("Choisissez le type de graphique :", 
                      ["Histogramme", "Heatmap", "Boxplots"])

if chart_type == "Histogramme":
    col_left, col_cent, col_right = st.columns([1,3,2])
    with col_cent:
        numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()
        st.subheader("Histogramme interactif")
        if "year" in numeric_columns:
            numeric_columns.remove("year")
        selected_column = st.selectbox("S√©lectionnez une colonne :", numeric_columns)

        if selected_column:
            fig, ax = plt.subplots(figsize=(8,5))
            sns.histplot(df[selected_column], bins=30, kde=True, ax=ax)
            ax.set_xlabel(selected_column)
            ax.set_ylabel("Fr√©quence")
            st.pyplot(fig)
    
    with col_right:st.markdown("""
            ### Observation des valeurs aberrantes et des valeurs extr√™mes :
            **income_composition_of_resources** : Dans l'histogramme, nous pouvons observer une valeur qui semble aberrante.  
            Lorsque l'on s√©lectionne cette colonne dans le boxplot, nous constatons effectivement qu'une donn√©e √† 0 semble √©trange.  
            Cette valeur appara√Æt √©galement dans l'analyse descriptive et dans le boxplot.  

            Nous pouvons en d√©duire qu'il manque probablement un ensemble de donn√©es, car il est peu probable d'avoir un `income_composition_of_resources`
            √©gal √† z√©ro, m√™me dans des cas extr√™mes.  
            Je choisis ici d'exclure les outliers.
            """)
        
        # note: gerer les outliners √† partir de ici, reprendre chat gpt
 if chart_type == "Boxplots":
    import matplotlib.pyplot as plt
    import streamlit as st
    import pandas as pd

    # üîπ Liste des colonnes √† nettoyer (√©viter les doublons dans la liste)
    columns_to_clean = list(set([
        'schooling', 'income composition of resources', 'adult mortality', 'hiv/aids', 'bmi', 'diphtheria',
        'polio', 'infant deaths', 'alcohol', 'percentage expenditure', 'hepatitis b', 'measles', 'under-five deaths',
        'gdp', 'population', 'thinness  1-19 years', 'thinness 5-9 years'
        ]))

    # üîπ Fonction pour nettoyer les outliers
    def clean_outliers(data, columns):
        for col in columns:
            if col in data.columns:
                # Calcul des quartiles et de l'IQR
                Q1 = data[col].quantile(0.25)
                Q3 = data[col].quantile(0.75)
                IQR = Q3 - Q1

                # D√©finir les bornes inf√©rieure et sup√©rieure
                lower_bound = Q1 - 1.5 * IQR
                upper_bound = Q3 + 1.5 * IQR

                # Remplacer les valeurs extr√™mes par les bornes
                data.loc[data[col] < lower_bound, col] = lower_bound
                data.loc[data[col] > upper_bound, col] = upper_bound

        return data

    # üîπ Appliquer le nettoyage des outliers AVANT affichage des graphiques
    df_cleaned = clean_outliers(df.copy(), columns_to_clean)

    # üîπ R√©cup√©rer la liste des colonnes disponibles apr√®s nettoyage
    available_columns = df_cleaned.columns.tolist()

    # üîπ S√©lection des variables √† afficher
    st.subheader(" Distribution des variables avec Boxplots (Nettoy√©es)")
    selected_columns = st.multiselect("S√©lectionnez les variables :", columns_to_clean, default=columns_to_clean[:5])

    if selected_columns:
        # V√©rifier la correspondance des noms de colonnes apr√®s nettoyage
        selected_columns_cleaned = [col.lower().replace(' ', '_') for col in selected_columns if col.lower().replace(' ', '_') in available_columns]

        # Nombre de colonnes et lignes pour affichage
        n_cols = 3
        n_rows = len(selected_columns_cleaned) // n_cols + (len(selected_columns_cleaned) % n_cols > 0)

        # Cr√©ation des subplots
        fig, axes = plt.subplots(n_rows, n_cols, figsize=(15, n_rows * 3))

        # Gestion du cas o√π une seule colonne est s√©lectionn√©e
        if n_rows == 1:
            axes = [axes]

        # G√©n√©rer les boxplots pour chaque colonne s√©lectionn√©e
        for i, col in enumerate(selected_columns_cleaned):
            row, col_index = divmod(i, n_cols)
            ax = axes[row, col_index] if n_rows > 1 else axes[col_index]

            ax.boxplot(df_cleaned[col].dropna(), vert=False, patch_artist=True, showmeans=True)
            ax.set_title(selected_columns[i])  # Garder le titre original
            ax.set_xlabel('Valeurs')

        # Supprimer les axes inutilis√©s
        for j in range(len(selected_columns_cleaned), n_rows * n_cols):
            row, col_index = divmod(j, n_cols)
            fig.delaxes(axes[row, col_index] if n_rows > 1 else axes[col_index])

        # Ajuster l'affichage
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.warning("Veuillez s√©lectionner au moins une variable.")


if chart_type == "Heatmap":
    import seaborn as sns
    import matplotlib.pyplot as plt
    import streamlit as st

    st.subheader(" Heatmap des Corr√©lations")

    # S√©lection des colonnes num√©riques
    numeric_columns = df.select_dtypes(include=['float64', 'int64']).columns.tolist()

    # V√©rifier que des colonnes num√©riques existent
    if not numeric_columns:
        st.warning("Aucune colonne num√©rique disponible pour la heatmap.")
    else:
        # S√©lecteur pour le seuil de corr√©lation
        correlation_threshold = st.slider("Seuil de corr√©lation (Valeurs absolues sup√©rieures)", 0.0, 1.0, 0.2, 0.05)

        # Calcul de la matrice de corr√©lation
        correlation_matrix = df[numeric_columns].corr()

        # Filtrer les corr√©lations selon le seuil
        filtered_corr = correlation_matrix[abs(correlation_matrix) > correlation_threshold]

        # Cr√©ation de la heatmap
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(filtered_corr, annot=True, fmt=".2f", cmap="coolwarm", linewidths=0.5, ax=ax)

        # Affichage dans Streamlit
        st.pyplot(fig)


# --------------------------------------------------------------


# Section Transformation des donn√©es
st.markdown("---")
st.markdown("## 5. Transformation des donn√©es")

st.write("""
Tranformons les donn√©es pour les rendre exploitables dans mes mod√®les.  
Cela inclut :
- **Normaliser** ou **standardiser** les donn√©es si n√©cessaire.
- **Encoder** les variables cat√©goriques.
- **Cr√©er ou combiner** des colonnes pour extraire des informations pertinentes.
""")

st.markdown("---")
st.markdown("###  Standardisation des colonnes en vue d'une r√©gression lin√©aire")
st.write("""
La **standardisation** est pr√©f√©rable √† la normalisation dans le cadre de donn√©es distribu√©es,  
notamment pour garantir une meilleure interpr√©tation et stabilit√© des mod√®les de **r√©gression lin√©aire**.
""")
# --------------------------------------------------------------
from sklearn.preprocessing import StandardScaler

#  Liste des colonnes num√©riques √† standardiser
columns_to_standardize = [
    'adult mortality', 'infant deaths', 'alcohol', 'percentage expenditure',
    'hepatitis b', 'measles', 'bmi', 'under-five deaths',
    'polio', 'gdp', 'population', 'thinness  1-19 years',
    'thinness 5-9 years', 'income composition of resources', 'schooling'
]


# Interface utilisateur pour activer ou non la standardisation
st.markdown("###  Standardisation des colonnes")
st.write("La standardisation est appliqu√©e aux variables num√©riques afin de les rendre comparables.")

apply_standardization = st.checkbox("Appliquer la standardisation")

if apply_standardization:
    # V√©rifier si les colonnes existent dans le dataset apr√®s nettoyage
    columns_to_standardize = [col for col in columns_to_standardize if col in df.columns]

    if columns_to_standardize:
        # Initialiser le standard scaler
        scaler = StandardScaler()

        # Appliquer la standardisation
        df[columns_to_standardize] = scaler.fit_transform(df[columns_to_standardize])

        st.success(" Standardisation appliqu√©e avec succ√®s !")

        # Affichage des statistiques apr√®s transformation
        st.write("###  Statistiques apr√®s standardisation")
        st.write(df[columns_to_standardize].describe())
#---------------------------------------------------------------
st.markdown("---")
st.markdown("## 6. Analyse des donn√©es")

st.write("""
Analisons les donn√©es pour identifier des relations significatives entre les variables.  
Cela inclut: 
Calculer des **corr√©lations** entre les variables ainsi que
R√©aliser des **tests statistiques** pour valider mes hypoth√®ses.
""")

import streamlit as st
import pandas as pd

# V√©rification et affichage des corr√©lations avec 'life expectancy'
st.markdown("###  Corr√©lations avec 'Life expectancy'")

if 'life expectancy' in df.columns:
    # Calcul des corr√©lations
    correlations = df.corr()['life expectancy'].sort_values(ascending=False)

    # Affichage dans un tableau interactif
    st.write(" **Top des corr√©lations avec l'esp√©rance de vie** :")
    st.write(correlations)
else:
    st.warning("‚ö† La colonne 'life expectancy' n'existe pas dans le dataset.")
